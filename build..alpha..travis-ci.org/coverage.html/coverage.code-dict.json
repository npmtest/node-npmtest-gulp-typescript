{"/home/travis/build/npmtest/node-npmtest-gulp-typescript/test.js":"/* istanbul instrument in package npmtest_gulp_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/lib.npmtest_gulp_typescript.js":"/* istanbul instrument in package npmtest_gulp_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_gulp_typescript = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_gulp_typescript = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-gulp-typescript && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_gulp_typescript */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_gulp_typescript\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_gulp_typescript.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_gulp_typescript.rollup.js'] =\n            local.assetsDict['/assets.npmtest_gulp_typescript.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_gulp_typescript.__dirname + '/lib.npmtest_gulp_typescript.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/node_modules/gulp-typescript/release/main.js":"\"use strict\";\nvar fs = require('fs');\nvar path = require('path');\nvar _project = require('./project');\nvar utils = require('./utils');\nvar _reporter = require('./reporter');\nfunction compile(param, theReporter) {\n    if (arguments.length >= 3) {\n        utils.deprecate(\"Reporter are now passed as the second argument\", \"remove the second argument\", \"Filters have been removed as of gulp-typescript 3.0.\\nThe reporter is now passed as the second argument instead of the third argument.\");\n    }\n    var proj;\n    if (typeof param === \"function\") {\n        proj = param;\n        if (arguments.length >= 2) {\n            utils.deprecate(\"ts(tsProject, ...) has been deprecated\", \"use .pipe(tsProject(reporter)) instead\", \"As of gulp-typescript 3.0, .pipe(ts(tsProject, ...)) should be written as .pipe(tsProject(reporter)).\");\n        }\n        else {\n            utils.deprecate(\"ts(tsProject) has been deprecated\", \"use .pipe(tsProject(reporter)) instead\", \"As of gulp-typescript 3.0, .pipe(ts(tsProject)) should be written as .pipe(tsProject()).\");\n        }\n    }\n    else {\n        proj = compile.createProject(param || {});\n    }\n    return proj(theReporter);\n}\nfunction getTypeScript(typescript) {\n    if (typescript)\n        return typescript;\n    try {\n        return require('typescript');\n    }\n    catch (e) {\n        utils.deprecate(\"TypeScript not installed\", \"install with `npm install typescript --save-dev`\", \"As of gulp-typescript 3.0, TypeScript isn't bundled with gulp-typescript any more.\\nInstall the latest stable version with `npm install typescript --save-dev`\\nor a nightly with `npm install typescript@next --save-dev`\");\n        throw new Error(\"TypeScript not installed\");\n    }\n}\nfunction getCompilerOptions(settings, projectPath, configFileName) {\n    var typescript = getTypeScript(settings.typescript);\n    if (settings.sourceRoot !== undefined) {\n        console.warn('gulp-typescript: sourceRoot isn\\'t supported any more. Use sourceRoot option of gulp-sourcemaps instead.');\n    }\n    if (settings.noExternalResolve !== undefined) {\n        utils.deprecate(\"noExternalResolve is deprecated\", \"use noResolve instead\", \"The non-standard option noExternalResolve has been removed as of gulp-typescript 3.0.\\nUse noResolve instead.\");\n    }\n    if (settings.sortOutput !== undefined) {\n        utils.deprecate(\"sortOutput is deprecated\", \"your project might work without it\", \"The non-standard option sortOutput has been removed as of gulp-typescript 3.0.\\nYour project will probably compile without this option.\\nOtherwise, if you're using gulp-concat, you should remove gulp-concat and use the outFile option instead.\");\n    }\n    // Copy settings and remove several options\n    var newSettings = {};\n    for (var _i = 0, _a = Object.keys(settings); _i < _a.length; _i++) {\n        var option = _a[_i];\n        if (option === 'declarationFiles') {\n            newSettings.declaration = settings.declarationFiles;\n            continue;\n        }\n        if (option === 'noExternalResolve' ||\n            option === 'sortOutput' ||\n            option === 'typescript' ||\n            option === 'sourceMap' ||\n            option === 'inlineSourceMap' ||\n            option === 'sourceRoot' ||\n            option === 'inlineSources')\n            continue;\n        newSettings[option] = settings[option];\n    }\n    var result = typescript.convertCompilerOptionsFromJson(newSettings, projectPath, configFileName);\n    var reporter = _reporter.defaultReporter();\n    for (var _b = 0, _c = result.errors; _b < _c.length; _b++) {\n        var error = _c[_b];\n        reporter.error(utils.getError(error, typescript), typescript);\n    }\n    result.options.sourceMap = true;\n    result.options.suppressOutputPathCheck = true;\n    return result.options;\n}\nvar compile;\n(function (compile) {\n    compile.reporter = _reporter;\n    function createProject(fileNameOrSettings, settings) {\n        var tsConfigFileName = undefined;\n        var tsConfigContent = undefined;\n        var projectDirectory = process.cwd();\n        if (fileNameOrSettings !== undefined) {\n            if (typeof fileNameOrSettings === 'string') {\n                tsConfigFileName = path.resolve(process.cwd(), fileNameOrSettings);\n                projectDirectory = path.dirname(tsConfigFileName);\n                // Load file and strip BOM, since JSON.parse fails to parse if there's a BOM present\n                var tsConfigText = fs.readFileSync(tsConfigFileName).toString();\n                var typescript = getTypeScript(settings && settings.typescript);\n                var tsConfig = typescript.parseConfigFileTextToJson(tsConfigFileName, tsConfigText);\n                tsConfigContent = tsConfig.config || {};\n                if (tsConfig.error) {\n                    console.log(tsConfig.error.messageText);\n                }\n                var newSettings = {};\n                if (tsConfigContent.compilerOptions) {\n                    for (var _i = 0, _a = Object.keys(tsConfigContent.compilerOptions); _i < _a.length; _i++) {\n                        var key = _a[_i];\n                        newSettings[key] = tsConfigContent.compilerOptions[key];\n                    }\n                }\n                if (settings) {\n                    for (var _b = 0, _c = Object.keys(settings); _b < _c.length; _b++) {\n                        var key = _c[_b];\n                        newSettings[key] = settings[key];\n                    }\n                }\n                settings = newSettings;\n            }\n            else {\n                settings = fileNameOrSettings;\n            }\n        }\n        var project = _project.setupProject(projectDirectory, tsConfigContent, getCompilerOptions(settings, projectDirectory, tsConfigFileName), getTypeScript(settings.typescript));\n        return project;\n    }\n    compile.createProject = createProject;\n    function filter() {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        utils.deprecate('ts.filter() is deprecated', 'soon you can use tsProject.resolve()', 'Filters have been removed as of gulp-typescript 3.0.\\nSoon tsProject.resolve() will be available as an alternative.\\nSee https://github.com/ivogabe/gulp-typescript/issues/190.');\n    }\n    compile.filter = filter;\n})(compile || (compile = {}));\nmodule.exports = compile;\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/node_modules/gulp-typescript/release/project.js":"\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar stream = require('stream');\nvar vfs = require('vinyl-fs');\nvar path = require('path');\nvar gutil = require('gulp-util');\nvar utils = require('./utils');\nvar reporter_1 = require('./reporter');\nvar input_1 = require('./input');\nvar output_1 = require('./output');\nvar compiler_1 = require('./compiler');\nfunction setupProject(projectDirectory, config, options, typescript) {\n    var input = new input_1.FileCache(typescript, options);\n    var compiler = options.isolatedModules ? new compiler_1.FileCompiler() : new compiler_1.ProjectCompiler();\n    var running = false;\n    if (options.isolatedModules) {\n        options.newLine = typescript.NewLineKind.LineFeed;\n        options.sourceMap = false;\n        options.declaration = false;\n        options.inlineSourceMap = true;\n    }\n    var project = function (reporter) {\n        if (running) {\n            throw new Error('gulp-typescript: A project cannot be used in two compilations at the same time. Create multiple projects with createProject instead.');\n        }\n        running = true;\n        input.reset();\n        compiler.prepare(projectInfo);\n        var stream = new CompileStream(projectInfo);\n        projectInfo.output = new output_1.Output(projectInfo, stream, stream.js, stream.dts);\n        projectInfo.reporter = reporter || reporter_1.defaultReporter();\n        stream.on('finish', function () {\n            running = false;\n        });\n        return stream;\n    };\n    var singleOutput = options.out !== undefined || options.outFile !== undefined;\n    project.src = src;\n    project.typescript = typescript;\n    project.projectDirectory = projectDirectory;\n    project.config = config;\n    project.options = options;\n    var projectInfo = {\n        input: input,\n        singleOutput: singleOutput,\n        compiler: compiler,\n        options: options,\n        typescript: typescript,\n        directory: projectDirectory,\n        // Set when `project` is called\n        output: undefined,\n        reporter: undefined\n    };\n    return project;\n}\nexports.setupProject = setupProject;\nfunction src() {\n    if (arguments.length >= 1) {\n        utils.message(\"tsProject.src() takes no arguments\", \"Use gulp.src(..) if you need to specify a glob\");\n    }\n    var base;\n    if (this.options[\"rootDir\"]) {\n        base = path.resolve(this.projectDirectory, this.options[\"rootDir\"]);\n    }\n    var content = {};\n    if (this.config.include)\n        content.include = this.config.include;\n    if (this.config.exclude)\n        content.exclude = this.config.exclude;\n    if (this.config.files)\n        content.files = this.config.files;\n    if (this.options['allowJs'])\n        content.compilerOptions = { allowJs: true };\n    var _a = this.typescript.parseJsonConfigFileContent(content, this.typescript.sys, this.projectDirectory), fileNames = _a.fileNames, errors = _a.errors;\n    for (var _i = 0, errors_1 = errors; _i < errors_1.length; _i++) {\n        var error = errors_1[_i];\n        console.log(error.messageText);\n    }\n    if (base === undefined)\n        base = utils.getCommonBasePathOfArray(fileNames.filter(function (file) { return file.substr(-5) !== \".d.ts\"; })\n            .map(function (file) { return path.dirname(file); }));\n    var vinylOptions = { base: base, allowEmpty: true };\n    return vfs.src(fileNames, vinylOptions);\n}\nvar CompileStream = (function (_super) {\n    __extends(CompileStream, _super);\n    function CompileStream(project) {\n        _super.call(this, { objectMode: true });\n        this.js = new CompileOutputStream();\n        this.dts = new CompileOutputStream();\n        this.project = project;\n        // Prevent \"Unhandled stream error in pipe\" when a compilation error occurs.\n        this.on('error', function () { });\n    }\n    CompileStream.prototype._write = function (file, encoding, cb) {\n        if (cb === void 0) { cb = function (err) { }; }\n        if (!file)\n            return cb();\n        if (file.isNull()) {\n            cb();\n            return;\n        }\n        if (file.isStream()) {\n            return cb(new gutil.PluginError('gulp-typescript', 'Streaming not supported'));\n        }\n        var inputFile = this.project.input.addGulp(file);\n        this.project.compiler.inputFile(inputFile);\n        cb();\n    };\n    CompileStream.prototype._read = function () {\n    };\n    CompileStream.prototype.end = function (chunk, encoding, callback) {\n        if (typeof chunk === 'function') {\n            this._write(null, null, chunk);\n        }\n        else if (typeof encoding === 'function') {\n            this._write(chunk, null, encoding);\n        }\n        else {\n            this._write(chunk, encoding, callback);\n        }\n        this.project.compiler.inputDone();\n    };\n    return CompileStream;\n}(stream.Duplex));\nvar CompileOutputStream = (function (_super) {\n    __extends(CompileOutputStream, _super);\n    function CompileOutputStream() {\n        _super.call(this, { objectMode: true });\n    }\n    CompileOutputStream.prototype._read = function () {\n    };\n    return CompileOutputStream;\n}(stream.Readable));\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/node_modules/gulp-typescript/release/utils.js":"\"use strict\";\nvar path = require('path');\nvar gutil = require('gulp-util');\nfunction forwardSlashes(fileName) {\n    return fileName.replace(/\\\\/g, '/');\n}\nexports.forwardSlashes = forwardSlashes;\nfunction normalizePath(pathString) {\n    return path.normalize(pathString).toLowerCase();\n}\nexports.normalizePath = normalizePath;\n/**\n * Splits a filename into an extensionless filename and an extension.\n * 'bar/foo.js' is turned into ['bar/foo', 'js']\n * 'foo.d.ts' is parsed as ['foo', 'd.ts'] if you add 'd.ts' to knownExtensions.\n * @param knownExtensions An array with known extensions, that contain multiple parts, like 'd.ts'. 'a.b.c' should be listed before 'b.c'.\n */\nfunction splitExtension(fileName, knownExtensions) {\n    if (knownExtensions) {\n        for (var _i = 0, knownExtensions_1 = knownExtensions; _i < knownExtensions_1.length; _i++) {\n            var ext_1 = knownExtensions_1[_i];\n            var index_1 = fileName.length - ext_1.length - 1;\n            if (fileName.substr(index_1) === '.' + ext_1) {\n                return [fileName.substr(0, index_1), ext_1];\n            }\n        }\n    }\n    var ext = path.extname(fileName).toLowerCase().substr(1);\n    var index = fileName.length - ext.length;\n    return [fileName.substr(0, index - 1), ext];\n}\nexports.splitExtension = splitExtension;\n/**\n * Finds the common base path of two directories\n */\nfunction getCommonBasePath(a, b) {\n    var aSplit = a.split(/\\\\|\\//); // Split on '/' or '\\'.\n    var bSplit = b.split(/\\\\|\\//);\n    var commonLength = 0;\n    for (var i = 0; i < aSplit.length && i < bSplit.length; i++) {\n        if (aSplit[i] !== bSplit[i])\n            break;\n        commonLength += aSplit[i].length + 1;\n    }\n    return a.substr(0, commonLength);\n}\nexports.getCommonBasePath = getCommonBasePath;\nfunction getCommonBasePathOfArray(paths) {\n    if (paths.length === 0)\n        return '';\n    return paths.reduce(getCommonBasePath);\n}\nexports.getCommonBasePathOfArray = getCommonBasePathOfArray;\nfunction getError(info, typescript, file) {\n    var err = new Error();\n    err.name = 'TypeScript error';\n    err.diagnostic = info;\n    var codeAndMessageText = typescript.DiagnosticCategory[info.category].toLowerCase() +\n        ' TS' +\n        info.code +\n        ': ' +\n        typescript.flattenDiagnosticMessageText(info.messageText, '\\n');\n    if (!info.file) {\n        err.message = codeAndMessageText;\n        return err;\n    }\n    var fileName = info.file.fileName;\n    if (file) {\n        err.tsFile = file.ts;\n        err.fullFilename = file.fileNameOriginal;\n        if (file.gulp) {\n            fileName = path.relative(file.gulp.cwd, file.fileNameOriginal);\n            err.relativeFilename = fileName;\n            err.file = file.gulp;\n        }\n        else {\n            fileName = file.fileNameOriginal;\n        }\n    }\n    else {\n        err.fullFilename = info.file.fileName;\n    }\n    var startPos = typescript.getLineAndCharacterOfPosition(info.file, info.start);\n    var endPos = typescript.getLineAndCharacterOfPosition(info.file, info.start + info.length);\n    err.startPosition = {\n        position: info.start,\n        line: startPos.line,\n        character: startPos.character\n    };\n    err.endPosition = {\n        position: info.start + info.length - 1,\n        line: endPos.line,\n        character: endPos.character\n    };\n    err.message = gutil.colors.red(fileName + '(' + (startPos.line + 1) + ',' + (startPos.character + 1) + '): ').toString()\n        + codeAndMessageText;\n    return err;\n}\nexports.getError = getError;\nfunction deprecate(title, alternative, description) {\n    message(title, alternative, description);\n    console.log('  ' + gutil.colors.gray('More information: ' + gutil.colors.underline('http://dev.ivogabe.com/gulp-typescript-3/')));\n}\nexports.deprecate = deprecate;\nfunction message(title, alternative, description) {\n    console.log(gutil.colors.red('gulp-typescript').toString() +\n        gutil.colors.gray(': ') +\n        title +\n        gutil.colors.gray(' - ') +\n        alternative);\n    if (description)\n        console.log('  ' + gutil.colors.gray(description.replace(/\\n/g, '\\n  ')));\n}\nexports.message = message;\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/node_modules/gulp-typescript/release/reporter.js":"\"use strict\";\nvar gutil = require('gulp-util');\nfunction emptyCompilationResult() {\n    return {\n        transpileErrors: 0,\n        optionsErrors: 0,\n        syntaxErrors: 0,\n        globalErrors: 0,\n        semanticErrors: 0,\n        declarationErrors: 0,\n        emitErrors: 0,\n        emitSkipped: false\n    };\n}\nexports.emptyCompilationResult = emptyCompilationResult;\nfunction defaultFinishHandler(results) {\n    var hasError = false;\n    var showErrorCount = function (count, type) {\n        if (count === 0)\n            return;\n        gutil.log('TypeScript:', gutil.colors.magenta(count.toString()), (type !== '' ? type + ' ' : '') + (count === 1 ? 'error' : 'errors'));\n        hasError = true;\n    };\n    showErrorCount(results.transpileErrors, '');\n    showErrorCount(results.optionsErrors, 'options');\n    showErrorCount(results.syntaxErrors, 'syntax');\n    showErrorCount(results.globalErrors, 'global');\n    showErrorCount(results.semanticErrors, 'semantic');\n    showErrorCount(results.declarationErrors, 'declaration');\n    showErrorCount(results.emitErrors, 'emit');\n    if (results.emitSkipped) {\n        gutil.log('TypeScript: emit', gutil.colors.red('failed'));\n    }\n    else if (hasError) {\n        gutil.log('TypeScript: emit', gutil.colors.cyan('succeeded'), '(with errors)');\n    }\n}\nfunction nullReporter() {\n    return {};\n}\nexports.nullReporter = nullReporter;\nfunction defaultReporter() {\n    return {\n        error: function (error) {\n            console.error(error.message);\n        },\n        finish: defaultFinishHandler\n    };\n}\nexports.defaultReporter = defaultReporter;\nfunction longReporter() {\n    var typescript = require('typescript');\n    return {\n        error: function (error) {\n            if (error.tsFile) {\n                console.error('[' + gutil.colors.gray('gulp-typescript') + '] ' + gutil.colors.red(error.fullFilename\n                    + '(' + error.startPosition.line + ',' + error.startPosition.character + '): ')\n                    + 'error TS' + error.diagnostic.code + ' ' + typescript.flattenDiagnosticMessageText(error.diagnostic.messageText, '\\n'));\n            }\n            else {\n                console.error(error.message);\n            }\n        },\n        finish: defaultFinishHandler\n    };\n}\nexports.longReporter = longReporter;\nfunction fullReporter(fullFilename) {\n    if (fullFilename === void 0) { fullFilename = false; }\n    var typescript = require('typescript');\n    return {\n        error: function (error, typescript) {\n            console.error('[' + gutil.colors.gray('gulp-typescript') + '] '\n                + gutil.colors.bgRed(error.diagnostic.code + '')\n                + ' ' + gutil.colors.red(typescript.flattenDiagnosticMessageText(error.diagnostic.messageText, '\\n')));\n            if (error.tsFile) {\n                console.error('> ' + gutil.colors.gray('file: ') + (fullFilename ? error.fullFilename : error.relativeFilename) + gutil.colors.gray(':'));\n                var lines_1 = error.tsFile.text.split(/(?:\\r\\n|\\r|\\n)/);\n                var logLine = function (lineIndex, errorStart, errorEnd) {\n                    var line = lines_1[lineIndex];\n                    if (errorEnd === undefined)\n                        errorEnd = line.length;\n                    console.error('> ' + gutil.colors.gray('[' + lineIndex + '] ')\n                        + line.substring(0, errorStart)\n                        + gutil.colors.red(line.substring(errorStart, errorEnd))\n                        + line.substring(errorEnd));\n                };\n                for (var i = error.startPosition.line; i <= error.endPosition.line; i++) {\n                    logLine(i, i === error.startPosition.line ? error.startPosition.character - 1 : 0, i === error.endPosition.line ? error.endPosition.character - 1 : undefined);\n                }\n            }\n        },\n        finish: defaultFinishHandler\n    };\n}\nexports.fullReporter = fullReporter;\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/node_modules/gulp-typescript/release/input.js":"\"use strict\";\nvar path = require('path');\nvar utils = require('./utils');\n(function (FileChangeState) {\n    FileChangeState[FileChangeState[\"New\"] = 0] = \"New\";\n    FileChangeState[FileChangeState[\"Equal\"] = 1] = \"Equal\";\n    FileChangeState[FileChangeState[\"Modified\"] = 2] = \"Modified\";\n    FileChangeState[FileChangeState[\"Deleted\"] = 3] = \"Deleted\";\n    FileChangeState[FileChangeState[\"NotFound\"] = 4] = \"NotFound\";\n})(exports.FileChangeState || (exports.FileChangeState = {}));\nvar FileChangeState = exports.FileChangeState;\n(function (FileKind) {\n    FileKind[FileKind[\"Source\"] = 0] = \"Source\";\n    FileKind[FileKind[\"Config\"] = 1] = \"Config\";\n})(exports.FileKind || (exports.FileKind = {}));\nvar FileKind = exports.FileKind;\nvar File;\n(function (File) {\n    function fromContent(fileName, content) {\n        var kind = FileKind.Source;\n        if (path.extname(fileName).toLowerCase() === 'json')\n            kind = FileKind.Config;\n        return {\n            fileNameNormalized: utils.normalizePath(fileName),\n            fileNameOriginal: fileName,\n            content: content,\n            kind: kind\n        };\n    }\n    File.fromContent = fromContent;\n    function fromGulp(file) {\n        var str = file.contents.toString('utf8');\n        var data = fromContent(file.path, str);\n        data.gulp = file;\n        return data;\n    }\n    File.fromGulp = fromGulp;\n    function equal(a, b) {\n        if (a === undefined || b === undefined)\n            return a === b; // They could be both undefined.\n        return (a.fileNameOriginal === b.fileNameOriginal)\n            && (a.content === b.content);\n    }\n    File.equal = equal;\n    function getChangeState(previous, current) {\n        if (previous === undefined) {\n            return current === undefined ? FileChangeState.NotFound : FileChangeState.New;\n        }\n        if (current === undefined) {\n            return FileChangeState.Deleted;\n        }\n        if (equal(previous, current)) {\n            return FileChangeState.Equal;\n        }\n        return FileChangeState.Modified;\n    }\n    File.getChangeState = getChangeState;\n})(File = exports.File || (exports.File = {}));\nvar FileDictionary = (function () {\n    function FileDictionary(typescript) {\n        this.files = {};\n        this.firstSourceFile = undefined;\n        this.typescript = typescript;\n    }\n    FileDictionary.prototype.addGulp = function (gFile) {\n        return this.addFile(File.fromGulp(gFile));\n    };\n    FileDictionary.prototype.addContent = function (fileName, content) {\n        return this.addFile(File.fromContent(fileName, content));\n    };\n    FileDictionary.prototype.addFile = function (file) {\n        if (file.kind === FileKind.Source) {\n            this.initTypeScriptSourceFile(file);\n            if (!this.firstSourceFile)\n                this.firstSourceFile = file;\n        }\n        this.files[file.fileNameNormalized] = file;\n        return file;\n    };\n    FileDictionary.prototype.getFile = function (name) {\n        return this.files[utils.normalizePath(name)];\n    };\n    FileDictionary.prototype.getFileNames = function (onlyGulp) {\n        if (onlyGulp === void 0) { onlyGulp = false; }\n        var fileNames = [];\n        for (var fileName in this.files) {\n            if (!this.files.hasOwnProperty(fileName))\n                continue;\n            var file = this.files[fileName];\n            if (onlyGulp && !file.gulp)\n                continue;\n            fileNames.push(file.fileNameOriginal);\n        }\n        return fileNames;\n    };\n    FileDictionary.prototype.getSourceFileNames = function (onlyGulp) {\n        var fileNames = this.getFileNames(onlyGulp);\n        var sourceFileNames = fileNames\n            .filter(function (fileName) { return fileName.substr(fileName.length - 5).toLowerCase() !== '.d.ts'; });\n        if (sourceFileNames.length === 0) {\n            // Only definition files, so we will calculate the common base path based on the\n            // paths of the definition files.\n            return fileNames;\n        }\n        return sourceFileNames;\n    };\n    Object.defineProperty(FileDictionary.prototype, \"commonBasePath\", {\n        get: function () {\n            var _this = this;\n            var fileNames = this.getSourceFileNames(true);\n            return utils.getCommonBasePathOfArray(fileNames.map(function (fileName) {\n                var file = _this.files[utils.normalizePath(fileName)];\n                return path.resolve(process.cwd(), file.gulp.base);\n            }));\n        },\n        // This empty setter will prevent that TS emits 'readonly' modifier.\n        // 'readonly' is not supported in current stable release.\n        set: function (value) { },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FileDictionary.prototype, \"commonSourceDirectory\", {\n        get: function () {\n            var _this = this;\n            var fileNames = this.getSourceFileNames();\n            return utils.getCommonBasePathOfArray(fileNames.map(function (fileName) {\n                var file = _this.files[utils.normalizePath(fileName)];\n                return path.dirname(file.fileNameNormalized);\n            }));\n        },\n        // This empty setter will prevent that TS emits 'readonly' modifier.\n        // 'readonly' is not supported in current stable release.\n        set: function (value) { },\n        enumerable: true,\n        configurable: true\n    });\n    return FileDictionary;\n}());\nexports.FileDictionary = FileDictionary;\nvar FileCache = (function () {\n    function FileCache(typescript, options) {\n        this.previous = undefined;\n        this.noParse = false; // true when using a file based compiler.\n        this.version = 0;\n        this.typescript = typescript;\n        this.options = options;\n        this.createDictionary();\n    }\n    FileCache.prototype.addGulp = function (gFile) {\n        return this.current.addGulp(gFile);\n    };\n    FileCache.prototype.addContent = function (fileName, content) {\n        return this.current.addContent(fileName, content);\n    };\n    FileCache.prototype.reset = function () {\n        this.version++;\n        this.previous = this.current;\n        this.createDictionary();\n    };\n    FileCache.prototype.createDictionary = function () {\n        var _this = this;\n        this.current = new FileDictionary(this.typescript);\n        this.current.initTypeScriptSourceFile = function (file) { return _this.initTypeScriptSourceFile(file); };\n    };\n    FileCache.prototype.initTypeScriptSourceFile = function (file) {\n        if (this.noParse)\n            return;\n        if (this.previous) {\n            var previous = this.previous.getFile(file.fileNameOriginal);\n            if (File.equal(previous, file)) {\n                file.ts = previous.ts; // Re-use previous source file.\n                return;\n            }\n        }\n        file.ts = this.typescript.createSourceFile(file.fileNameOriginal, file.content, this.options.target);\n    };\n    FileCache.prototype.getFile = function (name) {\n        return this.current.getFile(name);\n    };\n    FileCache.prototype.getFileChange = function (name) {\n        var previous;\n        if (this.previous) {\n            previous = this.previous.getFile(name);\n        }\n        var current = this.current.getFile(name);\n        return {\n            previous: previous,\n            current: current,\n            state: File.getChangeState(previous, current)\n        };\n    };\n    FileCache.prototype.getFileNames = function (onlyGulp) {\n        if (onlyGulp === void 0) { onlyGulp = false; }\n        return this.current.getFileNames(onlyGulp);\n    };\n    Object.defineProperty(FileCache.prototype, \"firstSourceFile\", {\n        get: function () {\n            return this.current.firstSourceFile;\n        },\n        // This empty setter will prevent that TS emits 'readonly' modifier.\n        // 'readonly' is not supported in current stable release.\n        set: function (value) { },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FileCache.prototype, \"commonBasePath\", {\n        get: function () {\n            return this.current.commonBasePath;\n        },\n        set: function (value) { },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(FileCache.prototype, \"commonSourceDirectory\", {\n        get: function () {\n            return this.current.commonSourceDirectory;\n        },\n        set: function (value) { },\n        enumerable: true,\n        configurable: true\n    });\n    FileCache.prototype.isChanged = function (onlyGulp) {\n        if (onlyGulp === void 0) { onlyGulp = false; }\n        if (!this.previous)\n            return true;\n        var files = this.getFileNames(onlyGulp);\n        var oldFiles = this.previous.getFileNames(onlyGulp);\n        if (files.length !== oldFiles.length)\n            return true;\n        for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n            var fileName = files_1[_i];\n            if (oldFiles.indexOf(fileName) === -1)\n                return true;\n        }\n        for (var _a = 0, files_2 = files; _a < files_2.length; _a++) {\n            var fileName = files_2[_a];\n            var change = this.getFileChange(fileName);\n            if (change.state !== FileChangeState.Equal)\n                return true;\n        }\n        return false;\n    };\n    return FileCache;\n}());\nexports.FileCache = FileCache;\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/node_modules/gulp-typescript/release/output.js":"\"use strict\";\nvar path = require('path');\nvar sourceMap = require('source-map');\nvar gutil = require('gulp-util');\nvar utils = require('./utils');\nvar Output = (function () {\n    function Output(_project, streamFull, streamJs, streamDts) {\n        this.project = _project;\n        this.streamFull = streamFull;\n        this.streamJs = streamJs;\n        this.streamDts = streamDts;\n    }\n    Output.prototype.writeJs = function (base, fileName, content, sourceMapContent, cwd, original) {\n        var file = new gutil.File({\n            path: fileName,\n            contents: new Buffer(content),\n            cwd: cwd,\n            base: base\n        });\n        var appliedSourceMap = this.applySourceMap(sourceMapContent, original, file);\n        if (appliedSourceMap)\n            file.sourceMap = JSON.parse(appliedSourceMap);\n        this.streamFull.push(file);\n        this.streamJs.push(file);\n    };\n    Output.prototype.writeDts = function (base, fileName, content, cwd) {\n        var file = new gutil.File({\n            path: fileName,\n            contents: new Buffer(content),\n            cwd: cwd,\n            base: base\n        });\n        this.streamFull.push(file);\n        this.streamDts.push(file);\n    };\n    Output.prototype.applySourceMap = function (sourceMapContent, original, output) {\n        var _this = this;\n        if (sourceMapContent === undefined)\n            return undefined;\n        var map = JSON.parse(sourceMapContent);\n        var directory = path.dirname(output.path);\n        // gulp-sourcemaps docs:\n        // paths in the generated source map (`file` and `sources`) are relative to `file.base` (e.g. use `file.relative`).\n        map.file = utils.forwardSlashes(output.relative);\n        map.sources = map.sources.map(relativeToOutput);\n        delete map.sourceRoot;\n        var generator = sourceMap.SourceMapGenerator.fromSourceMap(new sourceMap.SourceMapConsumer(map));\n        var sourceMapOrigins = this.project.singleOutput\n            ? this.project.input.getFileNames(true).map(function (fName) { return _this.project.input.getFile(fName); })\n            : [original];\n        for (var _i = 0, sourceMapOrigins_1 = sourceMapOrigins; _i < sourceMapOrigins_1.length; _i++) {\n            var sourceFile = sourceMapOrigins_1[_i];\n            if (!sourceFile || !sourceFile.gulp || !sourceFile.gulp.sourceMap)\n                continue;\n            var inputOriginalMap = sourceFile.gulp.sourceMap;\n            var inputMap = typeof inputOriginalMap === 'object' ? inputOriginalMap : JSON.parse(inputOriginalMap);\n            // We should only apply the input mappings if the input mapping isn't empty,\n            // since `generator.applySourceMap` has a really bad performance on big inputs.\n            if (inputMap.mappings !== '') {\n                var consumer = new sourceMap.SourceMapConsumer(inputMap);\n                generator.applySourceMap(consumer);\n            }\n            if (!inputMap.sources || !inputMap.sourcesContent)\n                continue;\n            for (var i = 0; i < inputMap.sources.length; i++) {\n                var absolute = path.resolve(sourceFile.gulp.base, inputMap.sources[i]);\n                var relative = path.relative(output.base, absolute);\n                generator.setSourceContent(utils.forwardSlashes(relative), inputMap.sourcesContent[i]);\n            }\n        }\n        return generator.toString();\n        function relativeToOutput(fileName) {\n            var absolute = path.resolve(directory, fileName);\n            return utils.forwardSlashes(path.relative(output.base, absolute));\n        }\n    };\n    Output.prototype.finish = function (result) {\n        this.result = result;\n        if (this.project.reporter.finish)\n            this.project.reporter.finish(result);\n        this.streamFull.emit('finish');\n        this.streamJs.emit('finish');\n        this.streamDts.emit('finish');\n        this.streamFull.push(null);\n        this.streamJs.push(null);\n        this.streamDts.push(null);\n    };\n    Output.prototype.getError = function (info) {\n        var fileName = info.file && info.file.fileName;\n        var file = fileName && this.project.input.getFile(fileName);\n        return utils.getError(info, this.project.typescript, file);\n    };\n    Output.prototype.diagnostic = function (info) {\n        this.error(this.getError(info));\n    };\n    Output.prototype.error = function (error) {\n        if (!error)\n            return;\n        // call reporter callback\n        if (this.project.reporter.error)\n            this.project.reporter.error(error, this.project.typescript);\n        // & emit the error on the stream.\n        this.streamFull.emit('error', error);\n    };\n    return Output;\n}());\nexports.Output = Output;\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/node_modules/gulp-typescript/release/compiler.js":"\"use strict\";\nvar path = require('path');\nvar input_1 = require('./input');\nvar host_1 = require('./host');\nvar reporter_1 = require('./reporter');\nvar utils = require('./utils');\n/**\n * Compiles a whole project, with full type checking\n */\nvar ProjectCompiler = (function () {\n    function ProjectCompiler() {\n    }\n    ProjectCompiler.prototype.prepare = function (project) {\n        this.project = project;\n        this.hasSourceMap = false;\n    };\n    ProjectCompiler.prototype.inputFile = function (file) {\n        if (file.gulp.sourceMap)\n            this.hasSourceMap = true;\n    };\n    ProjectCompiler.prototype.inputDone = function () {\n        var _this = this;\n        if (!this.project.input.firstSourceFile) {\n            this.project.output.finish(reporter_1.emptyCompilationResult());\n            return;\n        }\n        var rootFilenames = this.project.input.getFileNames(true);\n        if (!this.project.singleOutput) {\n            if (this.project.options.rootDir === undefined) {\n                this.project.options.rootDir = utils.getCommonBasePathOfArray(rootFilenames.filter(function (fileName) { return fileName.substr(-5) !== \".d.ts\"; })\n                    .map(function (fileName) { return _this.project.input.getFile(fileName).gulp.base; }));\n            }\n        }\n        this.project.options.sourceMap = this.hasSourceMap;\n        var currentDirectory = utils.getCommonBasePathOfArray(rootFilenames.map(function (fileName) { return _this.project.input.getFile(fileName).gulp.cwd; }));\n        this.host = new host_1.Host(this.project.typescript, currentDirectory, this.project.input, this.project.options);\n        this.program = this.project.typescript.createProgram(rootFilenames, this.project.options, this.host, this.program);\n        var result = reporter_1.emptyCompilationResult();\n        result.optionsErrors = this.reportDiagnostics(this.program.getOptionsDiagnostics());\n        result.syntaxErrors = this.reportDiagnostics(this.program.getSyntacticDiagnostics());\n        result.globalErrors = this.reportDiagnostics(this.program.getGlobalDiagnostics());\n        result.semanticErrors = this.reportDiagnostics(this.program.getSemanticDiagnostics());\n        if (this.project.options.declaration) {\n            result.declarationErrors = this.program.getDeclarationDiagnostics().length;\n        }\n        if (this.project.singleOutput) {\n            var output_1 = {\n                file: undefined\n            };\n            this.emit(result, function (fileName, content) {\n                _this.attachContentToFile(output_1, fileName, content);\n            });\n            this.emitFile(output_1, currentDirectory);\n        }\n        else {\n            var output_2 = {};\n            var input = this.host.input.getFileNames(true);\n            for (var i = 0; i < input.length; i++) {\n                var fileName = utils.normalizePath(input[i]);\n                var file = this.project.input.getFile(fileName);\n                output_2[fileName] = { file: file };\n            }\n            this.emit(result, function (fileName, content, writeByteOrderMark, onError, sourceFiles) {\n                if (sourceFiles.length !== 1) {\n                    throw new Error(\"Failure: sourceFiles in WriteFileCallback should have length 1, got \" + sourceFiles.length);\n                }\n                var fileNameOriginal = utils.normalizePath(sourceFiles[0].fileName);\n                var file = output_2[fileNameOriginal];\n                if (!file)\n                    return;\n                _this.attachContentToFile(file, fileName, content);\n            });\n            for (var i = 0; i < input.length; i++) {\n                var fileName = utils.normalizePath(input[i]);\n                this.emitFile(output_2[fileName], currentDirectory);\n            }\n        }\n        this.project.output.finish(result);\n    };\n    ProjectCompiler.prototype.attachContentToFile = function (file, fileName, content) {\n        var _a = utils.splitExtension(fileName, ['d.ts']), extension = _a[1];\n        switch (extension) {\n            case 'js':\n            case 'jsx':\n                file.jsFileName = fileName;\n                file.jsContent = content;\n                break;\n            case 'd.ts':\n                file.dtsFileName = fileName;\n                file.dtsContent = content;\n                break;\n            case 'map':\n                file.jsMapContent = content;\n                break;\n        }\n    };\n    ProjectCompiler.prototype.emit = function (result, callback) {\n        var emitOutput = this.program.emit(undefined, callback);\n        result.emitErrors += emitOutput.diagnostics.length;\n        this.reportDiagnostics(emitOutput.diagnostics);\n        result.emitSkipped = emitOutput.emitSkipped;\n    };\n    ProjectCompiler.prototype.emitFile = function (_a, currentDirectory) {\n        var file = _a.file, jsFileName = _a.jsFileName, dtsFileName = _a.dtsFileName, jsContent = _a.jsContent, dtsContent = _a.dtsContent, jsMapContent = _a.jsMapContent;\n        if (!jsFileName)\n            return;\n        var base;\n        var baseDeclarations;\n        if (file) {\n            base = file.gulp.base;\n            if (this.project.options.outDir) {\n                var baseRelative = path.relative(this.project.options.rootDir, base);\n                base = path.join(this.project.options.outDir, baseRelative);\n            }\n            baseDeclarations = base;\n            if (this.project.options.declarationDir) {\n                var baseRelative = path.relative(this.project.options.rootDir, file.gulp.base);\n                baseDeclarations = path.join(this.project.options.declarationDir, baseRelative);\n            }\n        }\n        else if (this.project.options.outFile) {\n            base = this.project.directory;\n            baseDeclarations = base;\n        }\n        else {\n            var outFile = this.project.options.out;\n            base = jsFileName.substring(0, jsFileName.length - outFile.length);\n            baseDeclarations = base;\n        }\n        if (jsContent !== undefined) {\n            if (jsMapContent !== undefined) {\n                jsContent = this.removeSourceMapComment(jsContent);\n            }\n            this.project.output.writeJs(base, jsFileName, jsContent, jsMapContent, file ? file.gulp.cwd : currentDirectory, file);\n        }\n        if (dtsContent !== undefined) {\n            this.project.output.writeDts(baseDeclarations, dtsFileName, dtsContent, file ? file.gulp.cwd : currentDirectory);\n        }\n    };\n    ProjectCompiler.prototype.reportDiagnostics = function (diagnostics) {\n        for (var _i = 0, diagnostics_1 = diagnostics; _i < diagnostics_1.length; _i++) {\n            var error = diagnostics_1[_i];\n            this.project.output.diagnostic(error);\n        }\n        return diagnostics.length;\n    };\n    ProjectCompiler.prototype.removeSourceMapComment = function (content) {\n        // By default the TypeScript automaticly inserts a source map comment.\n        // This should be removed because gulp-sourcemaps takes care of that.\n        // The comment is always on the last line, so it's easy to remove it\n        // (But the last line also ends with a \\n, so we need to look for the \\n before the other)\n        var index = content.lastIndexOf('\\n', content.length - 2);\n        return content.substring(0, index) + '\\n';\n    };\n    return ProjectCompiler;\n}());\nexports.ProjectCompiler = ProjectCompiler;\nvar FileCompiler = (function () {\n    function FileCompiler() {\n        this.output = {};\n        this.previousOutput = {};\n        this.compilationResult = undefined;\n    }\n    FileCompiler.prototype.prepare = function (project) {\n        this.project = project;\n        this.project.input.noParse = true;\n        this.compilationResult = reporter_1.emptyCompilationResult();\n    };\n    FileCompiler.prototype.write = function (file, fileName, diagnostics, content, sourceMap) {\n        this.output[file.fileNameNormalized] = { fileName: fileName, diagnostics: diagnostics, content: content, sourceMap: sourceMap };\n        for (var _i = 0, diagnostics_2 = diagnostics; _i < diagnostics_2.length; _i++) {\n            var error = diagnostics_2[_i];\n            this.project.output.diagnostic(error);\n        }\n        this.compilationResult.transpileErrors += diagnostics.length;\n        this.project.output.writeJs(file.gulp.base, fileName, content, sourceMap, file.gulp.cwd, file);\n    };\n    FileCompiler.prototype.inputFile = function (file) {\n        if (file.fileNameNormalized.substr(file.fileNameNormalized.length - 5) === '.d.ts') {\n            return; // Don't compile definition files\n        }\n        if (this.project.input.getFileChange(file.fileNameOriginal).state === input_1.FileChangeState.Equal) {\n            // Not changed, re-use old file.\n            var old = this.previousOutput[file.fileNameNormalized];\n            this.write(file, old.fileName, old.diagnostics, old.content, old.sourceMap);\n            return;\n        }\n        var diagnostics = [];\n        var outputString = this.project.typescript.transpile(file.content, this.project.options, file.fileNameOriginal, diagnostics);\n        var index = outputString.lastIndexOf('\\n');\n        var mapString = outputString.substring(index + 1);\n        if (mapString.substring(0, 1) === '\\r')\n            mapString = mapString.substring(1);\n        var start = '//# sourceMappingURL=data:application/json;base64,';\n        if (mapString.substring(0, start.length) !== start) {\n            console.error('Couldn\\'t read the sourceMap generated by TypeScript. This is likely an issue with gulp-typescript.');\n            return;\n        }\n        mapString = mapString.substring(start.length);\n        var map = JSON.parse(new Buffer(mapString, 'base64').toString());\n        // TODO: Set paths correctly\n        // map.sourceRoot = path.resolve(file.gulp.cwd, file.gulp.base);\n        // map.sources[0] = path.relative(map.sourceRoot, file.gulp.path);\n        var fileNameExtensionless = utils.splitExtension(file.fileNameOriginal)[0];\n        var _a = utils.splitExtension(map.file), extension = _a[1]; // js or jsx\n        this.write(file, fileNameExtensionless + '.' + extension, diagnostics, outputString.substring(0, index), JSON.stringify(map));\n    };\n    FileCompiler.prototype.inputDone = function () {\n        this.project.output.finish(this.compilationResult);\n        this.previousOutput = this.output;\n        this.output = {};\n    };\n    return FileCompiler;\n}());\nexports.FileCompiler = FileCompiler;\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/node_modules/gulp-typescript/release/host.js":"\"use strict\";\nvar utils = require('./utils');\nvar Host = (function () {\n    function Host(typescript, currentDirectory, input, options) {\n        var _this = this;\n        this.getCurrentDirectory = function () {\n            return _this.currentDirectory;\n        };\n        this.writeFile = function (fileName, data, writeByteOrderMark, onError) { };\n        this.fileExists = function (fileName) {\n            var sourceFile = _this.input.getFile(fileName);\n            if (sourceFile)\n                return true;\n            return _this.fallback.fileExists(fileName);\n        };\n        this.readFile = function (fileName) {\n            var sourceFile = _this.input.getFile(fileName);\n            if (sourceFile)\n                return sourceFile.content;\n            return _this.fallback.readFile(fileName);\n        };\n        this.getSourceFile = function (fileName, languageVersion, onError) {\n            // TODO: Cache lib.d.ts files between compilations\n            var sourceFile = _this.input.getFile(fileName);\n            if (sourceFile)\n                return sourceFile.ts;\n            return _this.fallback.getSourceFile(fileName, languageVersion, onError);\n        };\n        this.realpath = function (path) { return _this.fallback.realpath(path); };\n        this.getDirectories = function (path) { return _this.fallback.getDirectories(path); };\n        this.directoryExists = function (path) { return _this.fallback.directoryExists(path); };\n        this.typescript = typescript;\n        this.fallback = typescript.createCompilerHost(options);\n        this.currentDirectory = currentDirectory;\n        this.input = input;\n    }\n    Host.prototype.getNewLine = function () {\n        return '\\n';\n    };\n    Host.prototype.useCaseSensitiveFileNames = function () {\n        return false;\n    };\n    Host.prototype.getCanonicalFileName = function (filename) {\n        return utils.normalizePath(filename);\n    };\n    Host.prototype.getDefaultLibFileName = function (options) {\n        return this.fallback.getDefaultLibFileName(options);\n    };\n    Host.prototype.getDefaultLibLocation = function () {\n        return this.fallback.getDefaultLibLocation();\n    };\n    return Host;\n}());\nexports.Host = Host;\n","/home/travis/build/npmtest/node-npmtest-gulp-typescript/node_modules/gulp-typescript/release/types.js":"\"use strict\";\n"}